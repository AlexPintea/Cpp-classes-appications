For every:
- is it: example, trivial, application version, remake, library version, final application, not completed
- needs rnd - optional
- what it does - list ( state what it does, then detail ) 
- improvements
- just for linux / cross-platform










Braille EAN13: final application, trivial, cross-platform

Consists of 2 seperate applications that were sent to the same contest.

Braille:
- offers features for both english and japanese braille systems
- replaces alphabet symbols ( individual letters for english and groups of letters for japanese ) with the binary representation of the braille alphabet
- able to translate files

EAN13 ( scannable codes you find on grocery ... ):
- converts the binary value of the code into readable integers
- conversion done using base 2 to base 10 conversion
- able to decode price and country












Brightly: final application, linux

- modifies the screen brightness
- offers the following options:
  1. Modify Bright - able to adjust the brightness up and down
                   - use [ and ] to dim up and down, type "done" to mention that you are done
  2. Bright Choices - presets for screen brightness ( 1. Bright  2. Default  3. Really bright  4. Normal )
  3. Continous slow - preset for unstoppable slow flicker ( only stoppable if you exit the application )
  4. Continous flicker - preset for unstoppable fast flicker ( only stoppable if you exit the application )
  more. More Birghties - executes a user-defined series of flickers, which stops when completed ( does not repeat like the 'continous' presets )
                       - users are asked to 
  reset. Reset Bright - resets brightness to default

 [exit]. Exits - exist the application

Improvements:
- get the screen name, do not ask the user to enter it
- make it so that the user is able to make their custom preset repeat
- make more presets for the user that they can choose / edit / delete / add
- remake the interface so that it has: 1. Modify brightness ( merge 1 and 2 ),  2. Show ( merge 3, 4 and more ), reset, info ( about each option ) and exit. 









Clmns: final application, cross-platform, needs rnd

- makes data for tables, either sql or plain data with column names
- has 3 datatypes for the columns: int, string and double
- able to include self-oteration column

Improvements:
- add other data-types: char, bool, ...









Cpp Class string brackets: final application, cross-platform
- makes classes when given the properties
- able to both define each data-type and recognise when given example data
- able to recognise table / array sizes or fill them in when they do not appear ( even if partial data if provided, only a size out of 7 for example )
- besides the class, the user receives arrays with the variable names provided, in case they need them for automating the generated code ...
- class is provided with:
	- private parameters
	- constructors ( one empty with initialisations and one with all paramaters )
	- getters and setters - multiple verifications available ( if you want to set a value at a position that exceeds the table size ... )
	- for tables, multiple intermediary functions are provided ( length, copy, ...  ) as well as multiple getters and setters
	- for tables ( with size >= 2 ) an array containing their data is provided to take care of operations such as copying data and others
	- a function to output information about the class parameter values
- available data-types for parameters: 1. int  2. float  3. double  4. char  5. string  6. long  7. bool   or   custom
- all gerenated classes use a boolean variable to determine if they are empty or not
- each generated class is fully commented

Improvements:
- when you use the constructor that takes values, make is_empty = 0, not true



Cpp Class multiple items string folders linux cpp: final application, linux
- database application able to make table connections
- available options ( database ):
	- make. Make class file - makes tables
	- edit. Edit / Show a class file - edit / show a table and its data
	- simmilar. Enter simmilar files - makes table connections ( add, remove and show connections )
	- delete. Delete a class file - delete a table
	- exit. Exit - exits the application
- available options ( table ):
	- 1. Add entry - add a table row
	- 2. Show entry - show a table row ( and the rows of other tables that are connected to it, when the values coincide, same for all show functions )
	- 3. Show entries - complete - shows all entries and numerotates them
	- 4. Show entries - shows multiple entries as you enter their id ( which is >= 1 )
	- 5. Remove entry - removes a table row
	- 6. Remove entries - removes multiple entries as you enter their id ( which is >= 1 )
	- 7. Clear entries - deletes all entries
	- 8. Sort ( show / save ) - sort by any column ( asc / desc ) and decide to just show the result, or also save it
	- 9. Move - move a certain entry up and down how many rows you want
	- 10. Swap - swaps 2 table rows
	- item. Show entries that have [item] - search though the table data for a certain string ( also available for other data types, converstions are made )
	- save. Save - saves the table ( table is saved anyway, only to make the user feel safe )
	- exit. Exit - exits to the database options

Improvements:
- failed to save sorted rows - added 0 instead of 1 when swapping or such

Meaning of names given to intermediary versions:
item - means you can store a table for the class
multiple - means you can have multiple tables - database
inherits - uses inhertitance to define classes
string - able to input recognise the data-type of the entered data to make a class / table
folders - organised
linux - uses commands to delete folders when the user requests
brackets - able to deal with multidimentional tables to make classes ( any size for tables )

Cpp Class item string: application version, cross-platform
Cpp Class item: application version, cross-platform
Cpp Class multiple items string folders linux: application version, linux
Cpp Class multiple items string: application version, cross-platform
Cpp Class multiple items: application version, cross-platform
Cpp Class string: application version, cross-platform
Cpp Class string inherits virtual linux replace: application version, cross-platform
Cpp Class string inherit: application version, cross-platform
Cpp Class: application version, cross-platform









Css Atribs: final application, cross-platform
- converts css attributes, attribute values and classes amongst each other
- many times, css classes are made to style applications, however using attributes instead of classes can prove easier and more visible. So, conversions are needed. 
- even after conversion, both the initial data and the result are kept ( both classes and attributes for example, when converting class to attribute )
- attribute values can be converted to classes as such: [ atrib = "val" ] becomes .atrib-val

Improvements:
- convert attribute values to attributes, like with classes [ atrib-val ] 







Css File 1: final application, cross-platform
- using a header, the application can replace strings of the file to output multiple distinct variants of replacement ( for every result you replace what you want with what you need )
- the application orders the strings that need to be replaced, so that conflicts between replacement strings do not appear ( the result of the one replacement needs not be replaced by another replacement )
- even if made with css themes in mind, the application is versatile, meaning that it can replace any given strings

Css File: application version, cross-platform
- only outputs 1 specified file

Css: remake of "Css File", trivial, cross-platform
- define your css properties using an array and replace css_1 with css[1] = "your css" and such







File Counter: library version, remake, cross-platform
- uses the same file






Format text: trivial, cross-platform
- use only default templates to make letters of:
1. apology
2. thanks
3. invitation
4. congratulations
5. request
6. angry
7. trip
- uses a file counter to numerotate the output files






Git Readme Maker folder: final application, trivial, cross-platform
- keep your project details in your code file, with every compilation the actual separate file gets updated

Git Readme Maker: application version, trivial, cross-platform
- without separate folder






In c only






Inheritance file virtual: final application, cross-platform
- application that helps you keep track of your class inherintances
- makes it easy to understand what are the interitances, inheritors and virtual functions of every class
- options offered:
    1. Add Class     2. Add Inheritance     3. Add Inheritor     
    4. Remove Class  5. Remove Inheritance  6. Remove Inheritor  
    7. Show Classes  8. Add Virtual         9. Remove Virtual    

  exit. Exits
- the application does not use any of the provided classes, it only helps you keep the details you need


Inheritance file: application version, cross-platform
Inheritance: application version, cross-platform








Interface: final application, trivial, cross-platform
- makes interfaces, requesting names of functions and their parameters and data-types
- uses the data-types:
1. int  2. float  3. double  4. char  5. string  6. long  7. bool   or   custom ( enter now ) - void is considered custom
- able to make virtual functions
- asks you what to add to the file, so you do not have to ( only purpose )








Interval: final application, trivial, cross-platform
- generates intervals with either even, odd, prime or square numbers
- outputs to a user-specified file
- leaves new line for every 5 entries







Linux list Maker: final application, example, trivial, cross-platform
- adds entries to a list using linux commands ( example for using linux commands )







Linux operations: not completed, linux
- execute linux commands ( spares you typing them if you use them a lot )

Improvements:
- add more operations







Server: final application, linux
- server for databases of "Cpp Class multiple items string folders linux cpp"
- able to add and remove databases, as well as edit their names







Slce: final application, trivial, cross-platform
- separates any cpp application into what is before the main function and the main function ( using  files that are correlated to compile )







Sql Maker: final application, trivial, cross-platform
- makes sql commands to create a table nased on the user-defined column names and data-types
- only uses int and char data-types
- adds self-iterating on its own, no need to add it yourself
- could be used for automating with other applications






align: final application, cross-platform
- alignes text in a .txt file
- options available: 1. Left  2. Center  3. Right  4. Middle  5. table






application: final application, trivial, cross-platform
- makes an application layout
- able to add:
  1. variable   2. subprogram   3. class   4. struct
  5. variables  exit. Exit
- just adds them







are in files: final application, cross-platform
- searches one or many files for multiple queries ( strings )
- results of the search are shown in a result file for all the searched files
- able to keep your search queries in another file, one on each line
- able to keep the filepaths for the files that need to be searched in another file, one on each line
- the line where each result if found is shown in the result file
- results are grouped in the result file by the file that was searched and by search query

are in: application version, cross-platform
- only searches in one file








blar: final application, cross-platform
- array of bool made into class
- for bool arrays, there is a constant need to adjust the length of the array in a separate variable. So, the data-type has a good reason to become a class.
- there are 2 paramaters for the primitive bool array and for its length
- functions to:
	- add a bool to the end of the array
	- add a bool at a certain position
	- modify ( set ) a bool a certain position
	- remove a bool at a certain position
	- output information about the class
	- get the length
	- get bool at a certain position

Improvements:
- add string of 1 and 0 to the array ( for binary output )
- add constructor that takes a primitive bool array and its length










chars: example cross-platform
- encodes common words with uncommon characters
- able to both encode and decode files








choices 1: final application, cross-platform
- makes an application with numerotated choices
- asks for the application name and its features = options = choices, and makes an application that is able to:
	- keep showing choices until the user wants to exit
	- checks if the choice the user entered is available
	- spatiates the choices to align them
	- adds option for exiting the application on its own
	- able to search through the features both by number and by string 
	- able to adapt the user input to the available features ( reduce extra spaces, ... )

Improvements:
- if the user enters a feature called "exit" that has to not appear twice


choices: application version, cross-platform


choices lnux: final application, trivial, cross-platform
- makes a choices application for the linux command line ( takes application features and makes an application layout with them using only linux commands )







cmb file: final application, cross-platform, needs rnd
- outputs a combination of file lines
- can be used to generated human names, item names ...
- uses files that the user mentions ( also stores them )
- able to add, remove and show the files being used

cmb: final application, cross-platform, needs rnd
- outputs a combination of file lines
- can be used to generated human names, item names ...
- only uses 1 file ( which it remembers )
- able to generate combinaions of no matter how many items 







codes: final application, example, cross-platform
- example of guided self-generated code
- able to:
    1. Make an if    2. Make an if / else  3. Make a for      4. Make a struct  
    5. Make a class  6. Make a var.        7. Make a comment  
- all the aforementioned are added to a function of the file being complied







colors: final application, linux
- able to output colored text to the linux terminal
- bold / italic / strike-though / udnerline and dim also avaialble for formatting
- 9 colors available ( all the available ones )








commit linux same folder: application version, linux


commit same folder: application version, linux


commit your file: final application, cross-platform
- uses separate folder to make a copy of your code every 10 compilations
- can be set to ask for commit at every compilation 
- can be set to commit at a specified number of compilation
- able to reset the iterator used to numerotate the copies of your file ( the commits )








common frev multiple: final application, cross-platform
- used to determine the most common words by topic
- when a file is added ( to a topic or not ), the freqvency for each of its words is calculated and added next to the word in a file. After adding the words of the file with their freqvencies to a file that stores the most common words without regard to any topic, the user is asked if they want to add the file to a topic too. The process is repeated for the specified topic file.
- available options:
	- 1. Add File - adds the words of a file and their freqvencies to the "most common words" file. If needed, they are also added to a "most common words" file of a topic.
	- 2. Add topic - adds a topic ( adds and stores a topic name )
	- 3. Remove topic - removes a topic
	- 4. Show topics - shows all available topics
	- 5. Show topic - shows a topic and its top 5 most common words with their freqvencies
	- files. Remake files - if the user has at least 900 words stored in the general "most common words" file, they can remake the topic files to use the freqvencies of the general file, keeping the same words ( which are sorted, leading to the top most common words of that topic to change )
	- exit. Exits - exits the application
- the application checks for the same topic to not get added twice


common frev: application version, cross-platform
- only uses 1 file to store the most common words ( does not have topics )








common: not completed, cross-platform
- stores applications names and their description 
- has a search feature that gives exact results and also makes suggestions for applications that are simmilar with the applications found. In order to determine that 2 applications are simmilar, their descriptions and names are compared. Usual words are excluded when it comes to searching, since the user might want to store only applications that belong to a certain topic, for example "history" the word "history" needs not be searched and is therefore excluded at seatch. So, the user can exclude certain words.

Improvements
- make the usual words not be taken into consideration at search
- make it able to install an application ( copy the executable )
- make subcategory for adding usual words ( do not show it as a primary function, make another interface for that )







compare files: not completed, cross-platform
- compare sentances of multiple files to determine if they were plagiated
- the application separates the files into lowercased sentances. In order to compare the files, each sentance of 1 file compared with every sentance of the other files to determine how simmilar they are. Simmilarity is determined by the number of common words in the sentances.

Improvements:
- the common words and the lines they appear on are not counted correctly, only need to increment in 1 for, not in both  ( lines 290 )
- delete the "lines" files

compare: application version, cross-platform







convert file: example, cross-platform
- shows how conversions can be done using an external file ( output a data-type and read another )





convert: not completed, cross-platform
- converts between any 2 units of measurement ( for now it can only multiply one unit by a constant to get another, nneds to be done with rules )
- stores the conversions
- available options: 1. Convert  2. Add Convert  3. Edit Convert  4. Remove Convert  5. Show Converts

Improvements:
- add rules ( format an expression, then compile that expression in cpp to get the result and get the conversion )






cpp sh: library, linux
- uses scripts in separate files to communicate with the cpp functions ( to get parameters for the scripts and send results )

Improvements:
- add other scripts






datatype: final application, cross-platform
- separates file data into files for: integers, doubles and strings

Improvements:
- could add char, bool







deb folders maker desktop my_debs


deb folders maker desktop


deb folders maker







desktop maker folder: final application, linux
- makes desktop file for linux
- for every compilation, a desktop file is made


desktop maker: application versions, linux








details: trivial, example, cross-platform
- example of how you can store names and their details in 1 file
- available options: 1. Add  2. Remove  3. Edit  show. Show  exit. Exits








double: trivial, final application, cross-platform
- given any numbers, the application determines their properties and calculates their average
- for integers it determines: pos / neg, parity, divisors, prime divisors
- for double it determines: 

Improvements:
- do not stop input with 0
- for 1, do not show prime divisors ( shows only empty paranthesis )
- for double numbers, show at least is they are positive, approximations to every decimal and to integer, num. of decimals ( does not show )
- identify if any of teh numbers is pi or other constants







dplma: not completed, linux
- used to make diplomas
- enter the occasion, then either type or add a file with the names of the recipients

Improvements:
- add latex code
- ouput each diploma separately in a folder







errors: example, trivial, cross-platform
- correlate error codes with their actual text
- defining your error is only done manually

Improvements:
- make errors that take parameters
- make errors show when you compile other applications
- predefine certain errors: division by 0, ...







file browser: final application, linux
- uses only linux commands to move around the files
- available options: / 1. Home  / 2. Return / 3. Move Upwards / 4. Details / exit. Exits
- there is also a cpp version, not complete







file choices: final application, trivial, cross-platform
- provides with 2 templates to make either an application that uses 1 or multiple files ( just copies the files into your specified filename )







file counter: library version, remake, trivial, cross-platform
- uses 1 predefined file to count






file lines: trivial, example, application version, cross-platform
- monitors a file ( keeps on reloading the contents of a file to the terminal, to monitor any changes )






file string: final application, cross-platform
- converts the contents of a file to a string ( replaces new lines with \n and adds "" )
- able to add \n instead of spaces, of new lines or instead of sentances delimitated by any string
- also able to output an array of strings, with [ "", "" ] or just with ,
- able to merge multiple files into the same string

Improvements:
- add custom char instead of just ,







file type: not completed, final application, cross-platform
- file format that is very easy to use to make paragraphs with titles
- when considering a document, it is usually observable that it is made only out of paragraphs with titles. So, in order to format a document, thet is the only vital information that the user needs to provide. Documents need to be formated in multiple formats ( using latex, ... ), so there should be a base format for all of them.

Improvements:
- add file formats







files lines: final application, trivial, cross-platform
- able to monitor any file for changes ( showing its contents in the terminal )







files path: example, not completed, trivial linux
- gets all the filenames of a folder in cpp

Improvements
- uses wrong command, use "ls -p > file", not try to remake the filename
- could be part of "cpp sh", which could be part of a library







filesize: final application, linux
- able to determine the filesize for every file-type in a folder, as well as show a percentage of each filesize out of total filesize








form: final application, cross-platform
- able to make forms that can be completed in the terminal
- provides with:
	- multiple choices
	- 1 line field of text
	- numeric interval field
- makes a cpp application that collects the specified data, which then formats the data into its very own file format 

Improvements:
- outputs forever for certain inputs
- determine what the 4th option does








format file: trivial, example, cross-platform
- you give it a title and details and it formats them, only to add a few new lines and welcome the user to the application
- intended to make application details

Improvements:
- could add user details after every application









format: application version, cross-platform
- for "file string"








formats: final application, cross-platform
- adds style to a plain text file by adding user-defined strings before and after: words, lines or chatacters







frev: final application, cross-platform
- counts the freqvence of each word used in multiple specified files
- outputs the results in a file







gap: final application, cross-platform
- given a file with gaps defined by [], the user can replace each of the gaps with their input to make a file they can name






get files: library version, cross-platform 
- functions for getting and setting multiple files at once







get length: final application, cross-platform
- gets words of certain files based only on their length
- available options: 1. Larger  2. Fewer  3. Equal
- shows results in a separate file, also mentioning the line number where they were found

Improvement:
- add option for interval







get paths: final application, linux
- able to go through all folders in a folder to show what is in each of them ( does so for folder it finds, until there are no more )
- outputs the result in a file
- the output can be used to represent the file structure in a format that takes up the least memory possible

Improvement
- convert the result to filepaths







header folder: final application, linux
- converts a cpp application to a header file that uses every function it has besides main ( the functions are stored separately, onlt the function names are in the header file )


header: application version, cross-platform
- does not use linux commands to put the files in a folder
- function inplementation in header







html website







invalid: final application, trivial, cross-platform
- given an array of integer, it determines the ones that are missing ( between the max and min values )






linux commands: remake, final application, linux
- use choices to execute linux commands
- could be used for repiring the system







lng: final application, cross-platform
- given a list of language-specific symbols and their replacements, the application converts code written in the language that uses the replacements to cpp, then compiles it
- does not need a main function
- code can exist outside any other functions







maker folder: final appliation, cross-platform
- makes a makefile with every compilation


maker: application version, cross-platform







measure: final application, trivial, cross-platform
- measure distances by measuring the time it takes for you to walk
- has a  variation where you inpu the number of steps you walked to measure








mesur file: final application, cross-platform
- given a set of numeric data, the application calculates the average, errors for every entry, and an average error
- it also saves every file with measurements
- able to remove large errors by comparing with the average error
- able to add data to any of the saved measurements file ( either type it, or add it with a file )
- able to also reomve data, and measurement files
- shows the measurement filenames and their content
- computes the reults for any measurement and saves them in a separate file

mesur: application version, cross-platform
- takes data either by typing or with file and computes results in a file









more: not completed, linux
- meant to make classes and have them interract to change their parameter value (  )
- parameters have a range = interval in which they can fluctuate










nums: final application, cross-paltform
- able to separate the data by int, string and double and group it
- for string:
	- counts them, both total and distinct
	- determine average freqvence by calculating it ( and approximating it to an integer ) and by determning how much the most of them repeat themselves ( usually they only appear once )
	- show each string and their freqvency ( unless the freqvency is 1 )
	- determine average length of strings in the file by calculating it ( and approximating it to an integer ) and by determning the length of most of the strings
	- do all the above separately for:
		- large first letter
		- small first letter
		- all uppercase
		- all lowercas
	- calculate max and min ( both alphabetically and by length ) 
- for any data-type considered to be a string:
	- calculates total - word count
	- count total length of teh data without whitespace
	- determine average length by calculating it ( and approximating it to an integer ) and by determning the length of most of the words
	- count total length of both data and whitespace
	- count total whitespace ( coincides with its length )
	- calculates data / whitespace
	- counts file lines
	- datermine average length of lines in the file by calculating it ( and approximating it to an integer ) and by determning the length of most of the lines
	- determine average freqvence by calculating it ( and approximating it to an integer ) and by determning how much the most of them repeat themselves ( usually they only appear once )
	- determine common and uncommon words total and distinct total
	- calculate uncommon word freqvency / uncommon word count for every uncommon word and show only the top 5
	- calculate:
		- uncommon words / total ( count )
		- uncommon words / total words ( count )
		- uncommon words / total and wh-space ( length )
		- numerical data: total and how many ints and doubles
		- uncommon words and nmerical data / total ( count )
		- uncommon words and numerical data / total and wh-space ( length )
- for integers:
 	- counts them, both total and distinct
	- determine average freqvence by calculating it ( and approximating it to an integer ) and by determning how much the most of them repeat themselves ( usually they only appear once )
	- show each string and their freqvency ( unless the freqvency is 1 )
	- do all the above separately for:
		- even
		- odd
		- pos
		- neg
		- prime
		- square
	- determine the missing integers in the interval determined by the smallest and the largest integer
	- determine max and min
- for doubles:
 	- counts them, both total and distinct
	- determine average freqvence by calculating it ( and approximating it to an integer ) and by determning how much the most of them repeat themselves ( usually they only appear once )
	- show each string and their freqvency ( unless the freqvency is 1 )
	- do all the above separately for:
		- pos
		- neg
	- determine max and min 
- for both ints and doubles:
	- show each string and their freqvency ( unless the freqvency is 1 )
	- do all the above separately only for:
		- pos
		- neg

Improvements:
- for any data-type considered to be a string also add:
	- totat of distinct
	- do not do just for neg and pos separately, also both
 	- counts them, both total and distinct
	- determine average freqvence by calculating it ( and approximating it to an integer ) and by determning how much the most of them repeat themselves ( usually they only appear once )
	- determine max and min
- calculate lengths of ints and doubles too ( both separately and taken together )






organise: 


parts


pattern


percision


phrse common


prcns


prgrph


remove


rename


repeat string


repeat


repeat_files


replace filename


replace


response


rhthm notes


rhthm


scrpts


set time


sh in cpp


site maker 1


site maker linux


site maker


size more common


size more


size sh


size


slc file 1


slc file


sldn


slid


sntce


sort


speak


strys


sure


swap


syllab


tale


theme


thread


type lnux details


type lnux


type


types


unrar


unzip


verify


whitespace


Readme.md


a.out


code.cpp


main.cpp


